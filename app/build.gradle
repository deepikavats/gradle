/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }
    }
}

application {
    // Define the main class for the application.
    mainClass = 'demo.App'
}

tasks.register('listdir') {
    Directory dir
    Directory directory = directory.dir("app/src/main")
    println $directory
}

tasks.register('ensureDirectory') {
    // Store target directory into a variable to avoid project reference in the configuration cache
    String[] splitarray ;
    boolean found = false;
    File configfile = new File('src/main/java/demo')
    println configfile.list()
    File testfiles =  new File('src/test/java/demo')
    println "Printing from test"
    println testfiles.list()

    String[] list1 = configfile.list()
    String[] files = testfiles.list();



    println "now printing form loop"
    for(String element: list1)
        splitarray = element.split('\\.')
        String checkfile = splitarray[0] + "Test" + "." +  splitarray[1]
        println checkfile
        for(String file: files){
            println "from file array"
            println file
            if(file.equals(checkfile))
                found = true;
            else{
                throw new RuntimeException("File does not found")
            }
        }

}

tasks.register("closurefiles"){
    File srcDir
    srcDir = file('src/main/java/demo')
    FileCollection collection = files { srcDir.listFiles()}
    doLast{
        collection.each{ File f -> println f.name}
    }
}

tasks.register('list') {
    Directory projectDirectory = layout.projectDirectory
    println projectDirectory
    doLast {
        File srcDir
        boolean exist

        // Create a file collection using a closure
        FileCollection collection = projectDirectory.files { srcDir.listFiles() }


        srcDir = projectDirectory.file('src/main/java/demo').asFile
        println "Contents of $srcDir.name"
        collection.collect { projectDirectory.asFile.relativePath(it) }.sort().each { println it }

        srcDir = projectDirectory.file('src/test/java/demo').asFile
        println "Contents of $srcDir.name"
        collection.collect { projectDirectory.asFile.relativePath(it) }.sort().each { println it }
        exist = collection.contains("AppTest.java")
        println "Value of boolean is $exist"
        if(exist)
            logger.info("Test file exist")


    }
}